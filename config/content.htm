<h1>介紹Github的操作說明</h1>
<p>在Github中尋找一線生機。並尋求對程式的熱情。</p>
<p><img src="/images/8.png" width="393" height="390" alt=""></p>
<p></p>
<p></p>
<p></p>
<p><span style="color: #000000;"></span></p>
<h2>什麼是CMSimfly</h2>
<p>在python裡所主要作棟的軟體(?</p>
<p>缺一不可的重要腳色非他莫屬。</p>
<p>主要為python的程式結構。</p>
<p><img src="/images/708-封面-P29-600-1.png" width="500" height="270" alt=""></p>
<p></p>
<h2>甚麼是python</h2>
<h4><span style="color: #ff0000;">容易撰寫</span></h4>
<p>Python 通常可以靠比較短的程式碼完成比較多的功能，或者可以寫得比較清楚。</p>
<h4><span style="color: #ff0000;">功能強大</span></h4>
<p>Python絕大部分都是開放原始碼的，與主要作業系統的支援功能等等，含括的範圍非常地廣泛。</p>
<h4><span style="color: #ff0000;">跨平台</span></h4>
<p>各種主要的作業系統都支援 Python。Python 程式常常不需要修改。所撰寫的 Python 程式透過標準的模組進行包裝後，用標準的方式即可安裝於各種平台。</p>
<h4><span style="color: #ff0000;">容易擴充</span></h4>
<p>Python 算是執行效率不錯的直譯式語言。Python本身被設計為可擴充的。因此，有很多人把Python作為一種「膠水語言」（glue language）使用。使用Python將其他語言編寫的程式進行整合和封裝。</p>
<p></p>
<h2>python術語講解</h2>
<h4><span style="color: #ff6600;">編譯器</span></h4>
<p>將程式碼編譯為機器碼，再加以執行，用編譯語言寫成的程式，在執行期的執行速度，通常比用直譯語言寫的程式快。因為程式在編譯期，已經被預先編譯成機器碼，可以直接執行。</p>
<h4><span style="color: #ff6600;">直譯語言</span></h4>
<p>直譯語言是一種程式語言，會將程式碼一句一句直接執行，不需要像編譯語言一樣，經過編譯器先行編譯為機器碼，之後再執行。</p>
<h4><span style="color: #ff6600;">高階程式語言</span></h4>
<p>是高度封裝了的程式語言。以人類的日常語言為基礎的一種程式語言，使用一般人易於接受的文字來表示，有較高的可讀性，以方便對電腦認知較淺的人亦可以大概明白其內容。</p>
<h4><span style="color: #ff6600;">低階程式語言</span></h4>
<p>為電腦科學相關的術語，指的是一類電腦程式語言。它很少提供或不提供電腦的指令集體系結構-&gt;也就是語言對映中與處理器指令緊密相關的命令或函式。</p>
<p></p>
<h2>Python介紹</h2>
<h4>為一種廣泛使用的<span style="color: #ff0000;">高階程式語言</span>，由吉多&middot;范羅蘇姆創造，作為一種直譯語言，讓開發者能夠用更少的代碼表達想法，讓<span style="color: #ff0000;">程式的結構清晰明了</span>，正式直譯器CPython是用C語言編寫的、是一個由社群驅動的<span style="color: #ff0000;">自由軟體</span>。</h4>
<h4>從ABC發展而來的，雖然Python可能被粗略地分類為「<span style="color: #ff0000;">指令碼語言</span>」，但實際上一些大規模軟體開發計劃也廣泛地使用它，並且支援多種編程範式，包括物件導向、命令式、函數式和程序式編程，本身擁有一個巨大而廣泛的標準庫。</h4>
<h1>基本設定</h1><p>主要複習上學期的教學課程內容與增加學期中所操作時的心得</p><p><a href="https://www.ithome.com.tw/news/95283">https://www.ithome.com.tw/news/95283</a></p><p>以上網址可較認識到GIT的操作與功用</p><h2>創建Github帳號</h2>
<p><iframe width="500" height="280" src="//www.youtube.com/embed/gSUjyc3mQic" allowfullscreen="allowfullscreen"></iframe></p>
<p><span>1.</span><span style="color: #ff6600;">先到github之網站點選創建帳號</span></p>
<p><span style="color: #ff6600;"><img src="/images/chrome_2019-05-02_01-22-56.png" width="500" height="235" alt=""></span></p>
<p><span>2.<span style="color: #ff6600;">之後會測試是否為機器人操作，下一階段為填寫為何需要github的表單，可選擇填寫(看個人)，填寫完畢即可直接進入github使用軟體。</span></span></p>
<p><span><span style="color: #ff6600;"><img src="/images/chrome_2019-05-02_01-29-44.png" width="500" height="235" alt=""></span></span></p>
<p><span style="color: #ff0000;"><span style="color: #ff6600;">Done!!!!</span></span></p>
<h2>設定Proxy與Chrome代理主機設定</h2>
<h4><span>1.</span><span style="color: #ff0000;">進入proxy設定裡</span></h4>
<h4><span>2<span style="color: #ff0000;"><span style="color: #000000;">.</span>輸入伺服器網路位置</span></span></h4>
<h4><span>3.</span><span style="color: #ff0000;">儲存後重新連接即可獲取該伺服器之網路。</span></h4>
<p><span style="color: #ff0000;"><img src="/images/ApplicationFrameHost_2019-05-02_00-37-39.png" width="500" height="478" alt=""></span></p><h1>指令操作</h1>
<p><span style="color: #ff6600;">1.嘗試將程式碼打出</span></p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">&lt;p&gt;&lt;button onlick="myFunction()"&gt;Try it&lt;/button&gt;&lt;/p&gt;
&lt;p id="demo"&gt;&lt;p/&gt;
&lt;script&gt;// &lt;![CDATA[
function myFunction() {
  document.getElementById("demo").innerHTML = Math.floor(Math.random()*9);
}
// ]]&gt;&lt;/script&gt;</pre>
<p><span style="color: #ff6600;">2.指令碼練習</span><br><br></p>
<p><span><span style="color: #ff0000;">D:&nbsp;</span>&nbsp;去D槽之區域gi&nbsp;</span></p>
<p><span color="#000000"><span style="color: #ff0000;">cd&nbsp;</span><span>&nbsp;</span>進入資料夾</span></p>
<p><span style="color: #ff0000;">cd \</span>&nbsp; &nbsp;or<span>&nbsp;</span><span>cd .</span>返回根目錄</p>
<p><span style="color: #ff0000;">git init&nbsp;</span>增加數據庫</p>
<p><span style="color: #ff0000;">git clone</span>下載(後面需增加網址)</p>
<p><span style="color: #ff0000;">git add .</span>&nbsp; 快照，將工作區資料加入索引</p>
<p><span style="color: #ff0000;">git status</span>確認工作目錄與索引狀態</p>
<p><span style="color: #ff0000;">git pull</span>檢查近遠端是否連接</p>
<p><span><span style="color: #ff0000;">git commit -m</span> "檔案名稱"</span>推送上去之前所包裝之資料夾</p>
<p><span color="#000000"><span style="color: #ff0000;">git push</span>推送(會問帳號密碼)</span></p>
<p><span color="#000000"><span style="color: #ff0000;">git branch</span>查看分支</span></p>
<p><span color="#000000"><span><span style="color: #ff0000;">git merge</span>(分支名稱)&nbsp;</span>將某分支合併到目前分支，有commit</span></p>
<p><span color="#000000"><span><span style="color: #ff0000;">git rebase</span>(分支名稱)&nbsp;</span>將目前分支合併到某分支中，不會有commit</span></p>
<p><span color="#000000"><span style="color: #ff0000;">git&nbsp; checkout</span><span>&nbsp;</span>將開端移動HEAD</span></p>
<p><span color="#000000"><span style="color: #ff0000;">git log</span>檢視提交紀錄</span></p>
<p><span color="#000000"><span><span style="color: #ff0000;">git log --oneline --graph --</span>all</span>要求出現開頭的列表</span></p>
<p><span color="#000000"><span style="color: #ff0000;">git diff</span>查看上一個資料</span></p>
<p><span color="#000000"><span style="color: #ff0000;">git stash</span>移除上一個資料</span></p>
<p><span color="#000000"><span style="color: #ff0000;">python&nbsp; --version</span>查看python之版本</span></p>
<p><span color="#000000"><span style="color: #ff0000;">git remote&nbsp;</span>顯示遠端儲存庫</span></p>
<p><span style="color: #ff0000;">git clean&nbsp;</span>刪除工作區中未被追蹤的文件</p>
<h1>錯誤修正</h1>
<h4><span style="background-color: #ffffff; color: #ff0000;"><b>1.</b><b>單機與網路差別</b></span></h4>
<h4>&nbsp;&nbsp; 單機之資料庫只供本機使用，網路之資料庫為透過區域網路設定可供多人共用。</h4>
<h4><span style="color: #ff0000;"><b>2</b><b>.</b><b>為什麼協</b><b>同反而無法取得正確近端</b></span></h4>
<h4>&nbsp;&nbsp; 因為協同後，需要pull request才能真正取得倉儲之近端，在指令馬中打git pull，即可將近端</h4>
<h4>&nbsp;&nbsp; 遠端統合， 便可把資料push上去。</h4>
<h4><span style="color: #ff0000;"><b>3.</b><b>兩個人同時</b><b>用近端</b><b>並同時上傳檔案，但有合併衝突怎麼辦</b></span></h4>
<h4>&nbsp;&nbsp; 先將.htm檔拖曳到SciTE文字編輯器，找出衝突點，並刪除頭(&lt;&lt;&lt;&lt;&lt;&lt;&lt;)尾(&gt;&gt;&gt;&gt;&gt;&gt;&gt;)與接&nbsp;</h4>
<h4>&nbsp;&nbsp; 合處 (=======)後，儲存並重新進入近端，將之轉成Generapage，最後git add .&nbsp; gitcommit</h4>
<h4>&nbsp;&nbsp; git push。</h4>
<h4><span style="color: #ff0000;"><b>4</b><b>.</b><b>為什麼倉儲會突然找不到網頁，但在遠端還可以看到</b></span></h4>
<h4>&nbsp; 有可能是因為檔案中又包住另一個git clone 下來的資料，造成程式碼衝突，因而，使得變成</h4>
<h4>&nbsp;&nbsp;404網頁。</h4>
<h4>&nbsp;* 處理方式:建議不要將檔案連續包夾在同一個資料夾裡面。</h4>
<h4><span style="color: #ff0000;"><b>5.</b><b>為什麼更改字型但是網頁爆掉</b></span></h4>
<h4>&nbsp; 由於前後自行更改大小不一，因而造成網頁爆掉，需要到SciTE去刪除設定大小的前後(head3)</h4>
<h4>&nbsp;&nbsp;即可救回網頁。 P.S.建議不要隨便更改字型大小。</h4>
<h4><span style="color: #ff0000;"><b>6.</b><b>網頁爆掉如何救回</b></span></h4>
<h4>&nbsp; 檢視問題點在哪行程式碼，將之移除，並重新檢視、送出，以下為指令:</h4>
<h4><span style="color: #ff0000;">&nbsp; Git log(<span style="color: #000000;">查看從最近到最遠得提交日誌</span>)</span></h4>
<h4><span style="color: #ff0000;">&nbsp; Git checkout 7碼(<span style="color: #000000;">丟棄工作區文檔的修改</span>)</span></h4>
<h4><span style="color: #ff0000;">&nbsp; Git status(<span style="color: #000000;">查看當前git倉儲狀態</span>)</span></h4>
<h4><span style="color: #ff0000;">&nbsp; Git diff(<span style="color: #000000;">查看修改的文檔內容</span>)</span></h4>
<h4><span style="color: #ff0000;">&nbsp; Git status(<span style="color: #000000;">查看當前git倉儲狀態</span>)</span></h4>
<h4><span style="color: #ff0000;">&nbsp; Git stash(<span style="color: #000000;">將寫到一半的代碼從工作區拿走存起來</span>)</span></h4>
<h4><span style="color: #ff0000;">&nbsp; Git status(<span style="color: #000000;">查看當前git倉儲狀態</span>)</span></h4>
<h1>上學期內容</h1>
<p>首次接觸github倉儲經過與成品報告。</p>
<h2>Week1</h2>
<h5>進入<strong>github</strong>近端之前流程，更改密碼與日誌標題，與儲存提交程式碼的步驟。<iframe width="1381" height="489" src="https://www.youtube.com/embed/tJLm3IDbi54" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen="allowfullscreen"></iframe></h5>
<p><span>.</span></p>
<h2>Week2</h2>
<h4>投影片更改</h4>
<h5><strong>1.</strong>將<strong>reveal.ieo</strong>丟入<strong>workbook.leo</strong>裡面</h5>
<p><img src="/images/chrome_2018-10-31_21-15-03.png" width="500" height="351" alt=""></p>
<h5><strong>2.</strong>開始隨意更改.完成</h5>
<p><img src="/images/chrome_2018-10-31_21-16-30.png" width="521" height="341" alt=""></p>
<h4>網址更改</h4>
<h5><strong>1.</strong>將<strong>pelican.leo</strong>丟入<strong>workbook.leo</strong></h5>
<h5><strong>2</strong>.按近端<strong>local-blog</strong>右鍵<strong>Goto Script</strong>，之後再按一次<strong>local-blog</strong></h5>
<p><img src="/images/python_2018-10-31_21-36-53.png" width="500" height="209" alt=""></p>
<p><strong>3.</strong>按遠端下的<strong>@edit.publisheonf.py</strong>(在公用裡面)</p>
<p><img src="/images/python_2018-10-31_21-37-18.png" width="500" height="284" alt=""></p>
<h5><strong>4.</strong>更改<strong>17</strong>行的網址，更改成<strong>"https://mdecadp2018.github.io/site-s40723103/blog"</strong></h5>
<p>&nbsp; .<img src="/images/python_2018-10-31_21-37-52.png" width="500" height="229" alt=""></p>
<h5>&nbsp; 更改<strong>33</strong>行的網址，<strong>"mdecadp2018"</strong></h5>
<p><img src="/images/python_2018-10-31_21-38-08.png" width="500" height="238" alt=""></p>
<h5><strong>5.</strong>按遠端<strong>github.blog</strong>右鍵<strong>Goto Script</strong> 在按一次<strong>github.blog</strong></h5>
<p></p>
<p></p>
<h2>Week3</h2>
<h4>指令操作流程</h4>
<p><iframe width="1381" height="489" src="https://www.youtube.com/embed/srcm_CiWVtI" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen="allowfullscreen"></iframe></p>
<h2>week4</h2>
<p><span style="color: #ff0000;">.投影片、Blog更改</span></p>
<p>1.進入遠端</p>
<p>2.git pull 意思為將遠端資料抓到靜端裡面</p>
<p>3.連結近端(打python wsgi.py)</p>
<p>4.打開workbook.leo並將reveal.leo開啟</p>
<p><img src="/images/2018-11-02_15-34-52.png" width="500" height="274" alt=""></p>
<p>5.複製投影片，貼上，改名稱，並輸入以下程式碼。</p>
<p><img src="/images/python_2018-11-02_15-39-02.png" width="500" height="333" alt=""></p>
<p>6.並將名稱部分加入中括號，後面的小括號是網址連結。</p>
<p><img src="/images/python_2018-11-02_15-42-39.png" width="508" height="141" alt=""></p>
<p>7.開起遠端網頁，即可看到投影片上的文字連結。</p>
<p><img src="/images/explorer_2018-11-02_15-45-05.png" width="500" height="335" alt=""></p>
<p><img src="/images/explorer_2018-11-02_15-44-53.png" width="280" height="69" alt=""></p>
<p><img src="/images/ApplicationFrameHost_2018-11-02_15-45-24.png" width="500" height="332" alt=""></p>
<p>8.完成所有步驟，並將指令做提交的動作。</p>
<p>(ex:git commit and&amp;nbsp; git push)</p>
<p></p>
<h2>week5</h2>
<p><span style="color: #ff0000;">onshape 操作與指令</span></p>
<p>進入遠端之後再到實習操作onshape week1之onshape1-1</p>
<p>詳細閱讀上頭的資訊後即可操作接下來的步驟</p>
<p>先去onshape建立一個帳號</p>
<p><img src="/images/chrome_2018-11-02_16-02-26.png" width="550" height="269" alt=""></p>
<p>先檢視單位是否正確，先看到像是三的符號，點進去按下<span style="color: #ff0000;">工作區單位<span style="color: #000000;">，即可更改單位。</span></span></p>
<p><img src="/images/chrome_2018-11-02_16-01-30.png" width="405" height="538" alt=""></p>
<p>之後開啟草圖</p>
<p>如果想要轉正視圖的話按右鍵之view normal to sketch plane</p>
<p><img src="/images/chrome_2018-11-02_16-00-31.png" width="550" height="269" alt=""></p>
<p>即可開始繪圖</p>
<p><img src="/images/chrome_2018-11-02_16-00-59.png" width="550" height="269" alt=""></p>
<p><span style="color: #ff0000;">修改草圖</span></p>
<p><span style="color: #000000;">按旁邊列表裡的草圖，右鍵之後編輯</span></p>
<p><span style="color: #000000;"><img src="/images/chrome_2018-11-08_23-07-12.png" width="500" height="235" alt=""></span></p>
<p><span style="color: #ff0000;">多一個圖層</span></p>
<p><span style="color: #000000;">往偏右上方的部分，有一個類似正方形的按鍵，可做偏移等編輯</span></p>
<p><span style="color: #000000;"><img src="/images/chrome_2018-11-08_23-11-13.png" width="550" height="282" alt=""></span></p>
<p></p>
<h2>week6-0</h2>
<p>主要教學print的相關程式碼</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">#導入sys模組
import sys
#導入keyword模組
import keyword

#利用sys模組中的version_info印出Python版次
print("Python version: "，sys.version_info)
#利用keyword模組中的kwlist印出關鍵字
print("Python keyword: "，keyword.kwlist)
print("Total number of Python keyword: "，len(keyword.kwlist))</pre>
<p></p>
<p></p>
<p></p>
<p></p>
<p></p>
<p></p>
<p></p>
<h4></h4>
<p></p>
<h2>week6</h2>
<p>筆記重點內容，主要是紀錄print的使用方式與了解細節內容的部分。</p>
<p><img src="/images/0002.jpg" width="500" height="401" alt=""></p>
<p>並且記錄如何解決上周blog名稱產生衝突的解決辦法。</p>
<p><img src="/images/chrome_2018-11-09_11-40-29.png" width="591" height="193" alt=""></p>
<p>解釋python程式取出近端網址方法；主要分為三種</p>
<p><img src="/images/00001.jpg" width="500" height="318" alt=""></p>
<p>在例子中解取程式之間的內容與使用程式意義。</p>
<p><img src="/images/0003.jpg" width="500" height="653" alt=""></p>
<p>如此一來便即可深入了解print與python之間的連結。</p>
<p></p>
<h2>week7</h2>
<p><span style="color: #ff0000;">學習範圍:內建函式熟記。</span></p>
<p><img src="/images/chrome_2018-11-09_11-49-43.png" width="550" height="323" alt=""></p>
<p>且瞭解其中含意。</p>
<p><img src="/images/chrome_2018-11-09_11-48-14.png" width="550" height="372" alt=""></p>
<p>先觀察<span style="color: #ff0000;">6-0</span>的程式碼，裏頭有些限制必須了解。</p>
<p><img src="/images/0004.jpg" width="550" height="900" alt=""></p>
<p>熟記並了解，之後程式碼自己就可以自己打了&lt;3</p>
<p></p>
<h2>week8</h2>
<p><span style="color: #ff0000;">學習要點:</span></p>
<p>懂得網際程式Flask如何運用在自己的CMSimfly中的wsgi裡面之參數式。</p>
<p><img src="/images/0005.jpg" width="550" height="636" alt=""></p>
<p>開始了解科系中設計部分順序與設計意圖</p>
<p><span style="color: #ff0000;">補；設計意圖為主要設計之構想與使用機構之意義存在。</span></p>
<h1></h1>
<p></p>